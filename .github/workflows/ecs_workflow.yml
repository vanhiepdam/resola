name: CI/CD Workflow to deploy to Amazon ECS

on: none

env:
  AWS_REGION: ap-northeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: resolatest           # set this to your Amazon ECR repository name
  ECS_SERVICE: api                 # set this to your Amazon ECS service name
  ECS_CLUSTER: resolatest                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: infra/.aws/task-definition.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  BACKEND_CONTAINER_NAME: backend           # set this to the name of the container in the containerDefinitions section of your task definition
  DB_CONTAINER_NAME: db

  SECRET_KEY: 3a677a%h+t_*kwr)
  DATABASE_NAME: resola_be
  DATABASE_USER: postgres
  DATABASE_PASSWORD: postgres
  DEPLOY_DATABASE_HOST: db
  DATABASE_HOST: 127.0.0.1
  DATABASE_PORT: 5432
  AWS_STORAGE_BUCKET_NAME: resolatest

permissions:
  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip      
        python -m pip install pipx
        pipx install poetry==1.3.1
        poetry export -f requirements.txt --output requirements.txt --without-hashes --with test
        pip install -r requirements.txt

    - name: Run linting and type checking
      run: |
        source venv/bin/activate
        flake8 .
        safety check --bare -r requirements.txt
        mypy .

    - name: Run Tests
      run: |
        source venv/bin/activate
        cd src
        pytest

  deploy:
    name: Deploy
    needs: [ci]
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f deployments/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Render DB container to task definition
      id: db-container-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.DB_CONTAINER_NAME }}
        image: postgres:14-alpine
        environment-variables:  |
            POSTGRES_USER=${{ env.DATABASE_USER }}
            POSTGRES_PASSWORD=${{ env.DATABASE_PASSWORD }}
            POSTGRES_DB=${{ env.DATABASE_NAME }}

    - name: Render backend container definition
      id: backend-container-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.db-container-def.outputs.task-definition }}
        container-name: ${{ env.BACKEND_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables:  |
            SECRET_KEY=${{ env.SECRET_KEY }}
            DATABASE_NAME=${{ env.DATABASE_NAME }}
            DATABASE_USER=${{ env.DATABASE_USER }}
            DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            DATABASE_HOST=${{ env.DATABASE_HOST }}
            DATABASE_PORT=${{ env.DATABASE_PORT }}
            AWS_STORAGE_BUCKET_NAME=${{ env.AWS_STORAGE_BUCKET_NAME }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.backend-container-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
